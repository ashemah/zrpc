{"name":"ZRPC","body":"ZRPC is a library for building and using simple [ZeroMQ][]-based RPC servers.\r\nIt uses an *ad hoc* protocol based on [JSON-RPC 1.0][json-rpc], with [BSON][] as a\r\ntransport encoding and support for mixed positional and keyword arguments.\r\n\r\n  [zeromq]: http://zeromq.org/\r\n  [json-rpc]: http://json-rpc.org/\r\n  [bson]: http://bsonspec.org/\r\n\r\n\r\n## Server Example\r\n\r\n```python\r\nfrom zrpc.server import Registry, Server\r\n\r\n# Create a registry and define some methods.\r\nregistry = Registry()\r\n\r\n@registry.method\r\ndef add(*values):\r\n    return sum(values)\r\n\r\n@registry.method\r\ndef factorial(n):\r\n    return reduce(lambda x, y: x * y, xrange(1, n + 1))\r\n\r\n# Create and run a server using the registry.\r\nserver = Server('tcp://*:5000', registry)\r\nserver.run()\r\n```\r\n\r\n## Client Example\r\n\r\n```python\r\nfrom zrpc.client import Client\r\n\r\nc = Client('tcp://127.0.0.1:5000')\r\nassert c.add(3, 4) == 7\r\nassert c.factorial(20) == 2432902008176640000\r\n```\r\n\r\n## Load Balancer Example\r\n\r\n```python\r\nfrom zrpc.loadbal import LoadBalancer\r\n\r\n# The 'proxy' model -- the list of downstream servers is fixed.\r\nlb = LoadBalancer('tcp://127.0.0.1:5010', ('tcp://127.0.0.1:5000',))\r\nlb.run()\r\n\r\n# The 'broker' model -- downstream servers can come and go, but they need\r\n# to specify `connect=True` with an address of 'tcp://127.0.0.1:5005' to\r\n# connect to the output port of the balancer.\r\nlb = LoadBalancer('tcp://127.0.0.1:5010', 'tcp://127.0.0.1:5005')\r\nlb.run()\r\n```","tagline":"Ã˜MQ-based BSON-RPC in Python.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}